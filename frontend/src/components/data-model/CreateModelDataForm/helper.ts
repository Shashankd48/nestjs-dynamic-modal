// Columns to exclude from the form
import * as Yup from "yup";

export const autoGeneratedFields = ["id", "createdAt", "updatedAt"];

export const generateInitialValues = (
   schema: Column[],
   values?: FormValues
): FormValues => {
   const initialValues: FormValues = {};

   schema.forEach((field) => {
      if (!autoGeneratedFields.includes(field.name)) {
         let value: string | number | boolean | undefined =
            values?.[field.name] ?? "";

         if (field.type === "UUID") {
            value =
               typeof values?.[field.name] === "string"
                  ? values[field.name]
                  : crypto.randomUUID();
         } else if (field.type === "TIMESTAMP" || field.type === "DATE") {
            // Ensure value is a valid string or number before passing to `new Date()`
            if (
               typeof values?.[field.name] === "string" ||
               typeof values?.[field.name] === "number"
            ) {
               value = new Date(values[field.name] as string)
                  .toISOString()
                  .split("T")[0];
            } else {
               value = ""; // Default to empty string if invalid
            }
         }

         initialValues[field.name] = value;
      }
   });

   return initialValues;
};

// Function to generate validation schema
// export const generateValidationSchema = (schema: Column[]) => {
//    const validationSchema: Record<string, Yup.AnySchema> = {};

//    schema.forEach((field) => {
//       if (!autoGeneratedFields.includes(field.name)) {
//          let validator: Yup.AnySchema = Yup.string(); // Default to string

//          if (field.type === "UUID") {
//             validator = Yup.string().uuid("Invalid UUID format");
//          } else if (field.type === "VARCHAR") {
//             validator = Yup.string().required(`${field.name} is required`);
//          } else if (field.type === "TIMESTAMP") {
//             validator = Yup.date().required(`${field.name} is required`);
//          }

//          if (field.isNotNull) {
//             validator = validator.required(`${field.name} is required`);
//          }

//          validationSchema[field.name] = validator;
//       }
//    });

//    return Yup.object().shape(validationSchema);
// };

export function getInputType(type: string) {
   switch (type.toUpperCase()) {
      case "VARCHAR":
      case "CHAR":
      case "TEXT":
         return "text";
      case "INTEGER":
      case "BIGINT":
      case "SMALLINT":
      case "SERIAL":
      case "BIGSERIAL":
      case "NUMERIC":
      case "REAL":
      case "DOUBLE PRECISION":
      case "MONEY":
         return "number";
      case "BOOLEAN":
         return "checkbox";
      case "UUID":
         return "text"; // Can be auto-generated
      case "DATE":
         return "date";
      case "TIME":
         return "time";
      case "TIMESTAMP":
      case "TIMESTAMPTZ":
         return "datetime-local";
      case "JSON":
      case "JSONB":
         return "json";
      case "ARRAY":
         return "array";
      case "INET":
      case "CIDR":
      case "MACADDR":
         return "text"; // Consider validation logic for these types
      default:
         return "text";
   }
}

// Function to generate validation schema
export const generateValidationSchema = (schema: Column[]) => {
   const validationSchema: Record<string, Yup.AnySchema> = {};

   schema.forEach((field) => {
      if (!autoGeneratedFields.includes(field.name)) {
         let validator: Yup.AnySchema;

         switch (field.type) {
            case "UUID":
               validator = Yup.string().uuid("Invalid UUID format");
               break;
            case "VARCHAR":
            case "TEXT":
               validator = Yup.string();
               break;
            case "INTEGER":
               validator = Yup.number()
                  .integer("Must be an integer")
                  .typeError(`${field.name} must be a number`);
               break;
            case "BOOLEAN":
               validator = Yup.boolean();
               break;
            case "TIMESTAMP":
               validator = Yup.date()
                  .typeError(`${field.name} must be a valid date`)
                  .required(`${field.name} is required`);
               break;
            default:
               validator = Yup.mixed(); // Handle unknown types safely
         }

         // Apply required rule if the field is not null
         if (field.isNotNull) {
            validator = validator.required(`${field.name} is required`);
         }

         validationSchema[field.name] = validator;
      }
   });

   return Yup.object().shape(validationSchema);
};
