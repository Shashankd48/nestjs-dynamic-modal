import { useFormik } from "formik";
import * as Yup from "yup";
import { Input, Button } from "@heroui/react";

// **Define a type for form values dynamically**
type FormValues = {
   [key: string]: string | number | boolean | undefined;
};

// Columns to exclude from the form
const autoGeneratedFields = ["id", "createdAt", "updatedAt"];

// Function to generate initial values
const generateInitialValues = (schema: Column[]): FormValues => {
   const initialValues: FormValues = {};
   schema.forEach((field) => {
      if (!autoGeneratedFields.includes(field.name)) {
         initialValues[field.name] =
            field.type === "UUID" ? crypto.randomUUID() : "";
      }
   });
   return initialValues;
};

// Function to generate validation schema
const generateValidationSchema = (schema: Column[]) => {
   const validationSchema: Record<string, Yup.AnySchema> = {};

   schema.forEach((field) => {
      if (!autoGeneratedFields.includes(field.name)) {
         let validator: Yup.AnySchema = Yup.string(); // Default to string

         if (field.type === "UUID") {
            validator = Yup.string().uuid("Invalid UUID format");
         } else if (field.type === "VARCHAR") {
            validator = Yup.string().required(`${field.name} is required`);
         } else if (field.type === "TIMESTAMP") {
            validator = Yup.date().required(`${field.name} is required`);
         }

         if (field.isNotNull) {
            validator = validator.required(`${field.name} is required`);
         }

         validationSchema[field.name] = validator;
      }
   });

   return Yup.object().shape(validationSchema);
};

const getInputType = (type: string) => {
   switch (type.toLowerCase()) {
      case "date":
         return "date";

      default:
         return "text";
   }
};

type Props = {
   columns: any[];
   onSubmit: (values: any, cb: Function) => Promise<void>;
   onCancel: () => void;
};

// Dynamic Form Component
export default function CreateModelDataForm({
   columns,
   onCancel,
   onSubmit,
}: Props) {
   // Filter out auto-generated fields
   const filteredColumns = columns.filter(
      (col) => !autoGeneratedFields.includes(col.name)
   );

   const formik = useFormik<FormValues>({
      initialValues: generateInitialValues(filteredColumns),
      validationSchema: generateValidationSchema(filteredColumns),
      onSubmit: (values, { resetForm }) => {
         console.log("Submitted Values:", values);
         onSubmit(values, () => {
            resetForm();
         });
      },
   });

   return (
      <form onSubmit={formik.handleSubmit} className="space-y-4">
         {filteredColumns.map((field) => (
            <div key={field.name}>
               <Input
                  label={field.name}
                  type={getInputType(field.type)}
                  name={field.name}
                  value={formik.values[field.name] as string}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  isInvalid={
                     !!formik.errors[field.name] && formik.touched[field.name]
                  }
                  errorMessage={formik.errors[field.name] as string}
                  className="w-full"
               />
            </div>
         ))}

         <div className="flex justify-end gap-x-4">
            <Button type="button" color="danger" onPress={onCancel}>
               Cancel
            </Button>

            <Button type="submit" color="primary">
               Create
            </Button>
         </div>
      </form>
   );
}
